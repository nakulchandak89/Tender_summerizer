{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar animateStyle = require('./animate-style.cjs.js');\nvar options = require('./utils/options.cjs.js');\nvar resolveElements = require('../utils/resolve-elements.cjs.js');\nvar controls = require('./utils/controls.cjs.js');\nvar stagger = require('../utils/stagger.cjs.js');\nfunction animate(elements, keyframes, options$1 = {}) {\n  elements = resolveElements.resolveElements(elements);\n  const numElements = elements.length;\n  /**\n   * Create and start new animations\n   */\n  const animationFactories = [];\n  for (let i = 0; i < numElements; i++) {\n    const element = elements[i];\n    for (const key in keyframes) {\n      const valueOptions = options.getOptions(options$1, key);\n      valueOptions.delay = stagger.resolveOption(valueOptions.delay, i, numElements);\n      const animation = animateStyle.animateStyle(element, key, keyframes[key], valueOptions);\n      animationFactories.push(animation);\n    }\n  }\n  return controls.withControls(animationFactories, options$1,\n  /**\n   * TODO:\n   * If easing is set to spring or glide, duration will be dynamically\n   * generated. Ideally we would dynamically generate this from\n   * animation.effect.getComputedTiming().duration but this isn't\n   * supported in iOS13 or our number polyfill. Perhaps it's possible\n   * to Proxy animations returned from animateStyle that has duration\n   * as a getter.\n   */\n  options$1.duration);\n}\nexports.animate = animate;","map":{"version":3,"names":["Object","defineProperty","exports","value","animateStyle","require","options","resolveElements","controls","stagger","animate","elements","keyframes","options$1","numElements","length","animationFactories","i","element","key","valueOptions","getOptions","delay","resolveOption","animation","push","withControls","duration"],"sources":["D:/Tender_summerizer/Frontend/node_modules/@motionone/dom/dist/animate/index.cjs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar animateStyle = require('./animate-style.cjs.js');\nvar options = require('./utils/options.cjs.js');\nvar resolveElements = require('../utils/resolve-elements.cjs.js');\nvar controls = require('./utils/controls.cjs.js');\nvar stagger = require('../utils/stagger.cjs.js');\n\nfunction animate(elements, keyframes, options$1 = {}) {\n    elements = resolveElements.resolveElements(elements);\n    const numElements = elements.length;\n    /**\n     * Create and start new animations\n     */\n    const animationFactories = [];\n    for (let i = 0; i < numElements; i++) {\n        const element = elements[i];\n        for (const key in keyframes) {\n            const valueOptions = options.getOptions(options$1, key);\n            valueOptions.delay = stagger.resolveOption(valueOptions.delay, i, numElements);\n            const animation = animateStyle.animateStyle(element, key, keyframes[key], valueOptions);\n            animationFactories.push(animation);\n        }\n    }\n    return controls.withControls(animationFactories, options$1, \n    /**\n     * TODO:\n     * If easing is set to spring or glide, duration will be dynamically\n     * generated. Ideally we would dynamically generate this from\n     * animation.effect.getComputedTiming().duration but this isn't\n     * supported in iOS13 or our number polyfill. Perhaps it's possible\n     * to Proxy animations returned from animateStyle that has duration\n     * as a getter.\n     */\n    options$1.duration);\n}\n\nexports.animate = animate;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,YAAY,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACpD,IAAIC,OAAO,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAC/C,IAAIE,eAAe,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AACjE,IAAIG,QAAQ,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AACjD,IAAII,OAAO,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAEhD,SAASK,OAAOA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,GAAG,CAAC,CAAC,EAAE;EAClDF,QAAQ,GAAGJ,eAAe,CAACA,eAAe,CAACI,QAAQ,CAAC;EACpD,MAAMG,WAAW,GAAGH,QAAQ,CAACI,MAAM;EACnC;AACJ;AACA;EACI,MAAMC,kBAAkB,GAAG,EAAE;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;IAClC,MAAMC,OAAO,GAAGP,QAAQ,CAACM,CAAC,CAAC;IAC3B,KAAK,MAAME,GAAG,IAAIP,SAAS,EAAE;MACzB,MAAMQ,YAAY,GAAGd,OAAO,CAACe,UAAU,CAACR,SAAS,EAAEM,GAAG,CAAC;MACvDC,YAAY,CAACE,KAAK,GAAGb,OAAO,CAACc,aAAa,CAACH,YAAY,CAACE,KAAK,EAAEL,CAAC,EAAEH,WAAW,CAAC;MAC9E,MAAMU,SAAS,GAAGpB,YAAY,CAACA,YAAY,CAACc,OAAO,EAAEC,GAAG,EAAEP,SAAS,CAACO,GAAG,CAAC,EAAEC,YAAY,CAAC;MACvFJ,kBAAkB,CAACS,IAAI,CAACD,SAAS,CAAC;IACtC;EACJ;EACA,OAAOhB,QAAQ,CAACkB,YAAY,CAACV,kBAAkB,EAAEH,SAAS;EAC1D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIA,SAAS,CAACc,QAAQ,CAAC;AACvB;AAEAzB,OAAO,CAACQ,OAAO,GAAGA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script"}